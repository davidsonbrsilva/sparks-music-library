<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SparksMusic.Library</name>
    </assembly>
    <members>
        <member name="T:SparksMusic.Library.Chord">
            <summary>
            Chord class
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.Note">
            <summary>
            Chord note
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.Tonality">
            <summary>
            Chord tonality
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.Complement">
            <summary>
            Chord complement
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.Inversion">
            <summary>
            Chord inversion
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsFlat">
            <summary>
            True if chord is flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsDoubleFlat">
            <summary>
            True if chord is double flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsFlatOrDoubleFlat">
            <summary>
            True if chord is flat or double flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsSharp">
            <summary>
            True if chord is sharp
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsDoubleSharp">
            <summary>
            True if chord is double sharp
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Chord.IsSharpOrDoubleSharp">
            <summary>
            True if chord is sharp or double sharp
            </summary>
        </member>
        <member name="M:SparksMusic.Library.Chord.#ctor(System.String)">
            <summary>
            Creates a chord object from a string.
            </summary>
            <param name="chord">The chord</param>
            <exception cref="T:System.ArgumentNullException">Thrown when chord parameter is null.</exception>
            <exception cref="T:SparksMusic.Library.NotAChordException">Thrown when chord parameter is not a valid chord.</exception>
        </member>
        <member name="M:SparksMusic.Library.Chord.#ctor(SparksMusic.Library.Note,SparksMusic.Library.Tonality,System.String,SparksMusic.Library.Note)">
            <summary>
            Creates a chord object.
            </summary>
            <param name="note">The chord note</param>
            <param name="tonality">The chord tonality</param>
            <param name="complement">The chord complement</param>
            <param name="inversion">The chord inversion</param>
        </member>
        <member name="M:SparksMusic.Library.Chord.Equals(SparksMusic.Library.Chord)">
            <summary>
            Compare two chords.
            </summary>
            <param name="other">The other chord</param>
            <returns>True if both have same name.</returns>
        </member>
        <member name="M:SparksMusic.Library.Chord.op_Increment(SparksMusic.Library.Chord)">
            <summary>
            Transposes up chord a semitone.
            </summary>
            <param name="chord">The chord</param>
            <returns>The transposed chord</returns>
        </member>
        <member name="M:SparksMusic.Library.Chord.op_Decrement(SparksMusic.Library.Chord)">
            <summary>
            Transposes down chord a semitone.
            </summary>
            <param name="chord">The chord</param>
            <returns>The transposed chord</returns>
        </member>
        <member name="T:SparksMusic.Library.Accident">
            <summary>
            Accident enum
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Accident.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Accident.DoubleFlat">
            <summary>
            Double Flat
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Accident.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Accident.Sharp">
            <summary>
            Sharp
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Accident.DoubleSharp">
            <summary>
            Double Sharp
            </summary>
        </member>
        <member name="T:SparksMusic.Library.NoteLetter">
            <summary>
            Note Letter enum
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.D">
            <summary>
            D
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.E">
            <summary>
            E
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.F">
            <summary>
            F
            </summary>
        </member>
        <member name="F:SparksMusic.Library.NoteLetter.G">
            <summary>
            G
            </summary>
        </member>
        <member name="T:SparksMusic.Library.Tonality">
            <summary>
            Tonality enum
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Major">
            <summary>
            Major
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Minor">
            <summary>
            Minor
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Augmented">
            <summary>
            Augmented
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Diminished">
            <summary>
            Diminished
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.HalfDiminished">
            <summary>
            Half-Diminished
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Sus2">
            <summary>
            Suspended 2
            </summary>
        </member>
        <member name="F:SparksMusic.Library.Tonality.Sus4">
            <summary>
            Suspended 4
            </summary>
        </member>
        <member name="T:SparksMusic.Library.NotAChordException">
            <summary>
            NotAChord exception
            </summary>
        </member>
        <member name="M:SparksMusic.Library.NotAChordException.#ctor">
            <summary>
            NotAChord exception constructor
            </summary>
        </member>
        <member name="M:SparksMusic.Library.NotAChordException.#ctor(System.String)">
            <summary>
            NotAChord exception constructor
            </summary>
            <param name="message">The custom message of the exception</param>
        </member>
        <member name="M:SparksMusic.Library.NotAChordException.#ctor(System.String,System.Exception)">
            <summary>
            NotAChord exception constructor
            </summary>
            <param name="message">The custom message of the exception</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:SparksMusic.Library.EnumExtensions">
            <summary>
            Enum extensions
            </summary>
        </member>
        <member name="M:SparksMusic.Library.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Retrieve description field from specific enum.
            </summary>
            <param name="value">The enum value</param>
            <returns>The enum description.</returns>
        </member>
        <member name="T:SparksMusic.Library.Note">
            <summary>
            Note class
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.NoteLetter">
            <summary>
            Note letter
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.Accident">
            <summary>
            Note accident
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsFlat">
            <summary>
            True if chord is flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsDoubleFlat">
            <summary>
            True if chord is double flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsFlatOrDoubleFlat">
            <summary>
            True if chord is flat or double flat
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsSharp">
            <summary>
            True if chord is sharp
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsDoubleSharp">
            <summary>
            True if chord is double sharp
            </summary>
        </member>
        <member name="P:SparksMusic.Library.Note.IsSharpOrDoubleSharp">
            <summary>
            True if chord is sharp or double sharp
            </summary>
        </member>
        <member name="M:SparksMusic.Library.Note.#ctor(SparksMusic.Library.NoteLetter,SparksMusic.Library.Accident)">
            <summary>
            Creates a note object.
            </summary>
            <param name="noteLetter">The note letter (A, B, C, D, E, F or G)</param>
            <param name="accident">The note accident</param>
        </member>
        <member name="M:SparksMusic.Library.Note.Equals(SparksMusic.Library.Note)">
            <summary>
            Compare two notes.
            </summary>
            <param name="other">The other note</param>
            <returns>True if both have the same name.</returns>
        </member>
        <member name="T:SparksMusic.Library.Transposer">
            <summary>
            Transposer class
            </summary>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeUp(System.String,System.Int32)">
            <summary>
            Transposes up a chord.
            </summary>
            <param name="chord">The chord</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chord object is null.</exception>
            <exception cref="T:SparksMusic.Library.NotAChordException">Thrown when input is not a valid chord.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeUp(SparksMusic.Library.Chord,System.Int32)">
            <summary>
            Transposes up a chord.
            </summary>
            <param name="chord">The chord</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chord object is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeUp(SparksMusic.Library.Note,System.Int32)">
            <summary>
            Transposes up a note.
            </summary>
            <param name="note">The note</param>
            <param name="semitones">A transposed note.</param>
            <returns></returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeUp(System.Collections.Generic.List{SparksMusic.Library.Chord},System.Int32)">
            <summary>
            Transposes up a list of chords.
            </summary>
            <param name="chords">The chord list</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord list</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chords object is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeDown(System.String,System.Int32)">
            <summary>
            Transposes down a chord.
            </summary>
            <param name="chord">The chord</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chord object is null.</exception>
            <exception cref="T:SparksMusic.Library.NotAChordException">Thrown when input is not a valid chord.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeDown(SparksMusic.Library.Chord,System.Int32)">
            <summary>
            Transposes down a chord.
            </summary>
            <param name="chord">The chord</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chords object is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeDown(SparksMusic.Library.Note,System.Int32)">
            <summary>
            Transposes down a note.
            </summary>
            <param name="note">The note</param>
            <param name="semitones">The semitones</param>
            <returns>A transposed note.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.TransposeDown(System.Collections.Generic.List{SparksMusic.Library.Chord},System.Int32)">
            <summary>
            Transposes down a list of chords.
            </summary>
            <param name="chords">The chord list</param>
            <param name="semitones">The semitones to the transposition</param>
            <returns>A transposed chord list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chords object is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when semitones parameter is a negative number.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.ExtractChords(System.String)">
            <summary>
            Extract the chords from a input text.
            </summary>
            <param name="text">The text</param>
            <returns>A list of chords.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.GetValidChords(System.Collections.Generic.List{System.String})">
            <summary>
            Get valid chord from a chords string list.
            </summary>
            <param name="chords">The chords</param>
            <returns>A list of valid chords.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.GetSemitones(SparksMusic.Library.Note,SparksMusic.Library.Note)">
            <summary>
            Get the number of semitones from a chord to another.
            </summary>
            <param name="from">The origin chord</param>
            <param name="to">The destiny chord</param>
            <returns>The number of semitones from a chord to another.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.HasDifferentChromaticPole(SparksMusic.Library.Note,SparksMusic.Library.Note)">
            <summary>
            Check if two chords have different chromatic poles.
            </summary>
            <param name="note1">The first chord</param>
            <param name="note2">The second chord</param>
            <returns>True if both have different chromatic poles.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.GetChromaticCorrespondent(SparksMusic.Library.Note)">
            <summary>
            Get the chromatic correspondent note (if it is flat, the correspondent will be sharp and vice versa).
            </summary>
            <param name="note">The note</param>
            <returns>The chromatic correspondent note.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when note object is null.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.IsChord(System.String)">
            <summary>
            Check if the given name is a valid chord.
            </summary>
            <param name="chordName">The chord name</param>
            <returns>True if the given name is a valid chord.</returns>
        </member>
        <member name="M:SparksMusic.Library.Transposer.Optimize(System.String)">
            <summary>
            Apply optmizations to the input chord.
            </summary>
            <param name="chord">The chord</param>
            <returns>The optmized chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chords object is null.</exception>
            <exception cref="T:SparksMusic.Library.NotAChordException">Thrown when input is not a valid chord.</exception>
        </member>
        <member name="M:SparksMusic.Library.Transposer.Optimize(SparksMusic.Library.Chord)">
            <summary>
            Apply optmizations to the input chord.
            </summary>
            <param name="chord">The chord</param>
            <returns>The optmized chord.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when chords object is null.</exception>
        </member>
    </members>
</doc>
